{"version":3,"sources":["../../src/client.js"],"names":["graphql","makeExecutableSchema","assign","entries","Object","Prism","constructor","typeDefs","resolvers","broadcast","resolverData","queries","forEach","query","variables","cb","then","schema","subscribe","logErrors","data","handleErrors","errors","unsubscribe","mutate","mutation","filteredErrors","networkErrors","buildErrors","console","log","reduce","obj","error","originalError","response","push","message","stack","status"],"mappings":"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","file":"client.js","sourcesContent":["import { graphql } from 'graphql';\nimport { makeExecutableSchema } from 'graphql-tools';\nconst { assign, entries } = Object;\n\nexport class Prism {\n  constructor(typeDefs, resolvers) {\n    this.resolvers = resolvers;\n    this.schema    = makeExecutableSchema({ typeDefs, resolvers });\n    this.queries   = {};\n  }\n\n  subscribe(query, variables = {}, logErrors, cb) {\n    if (this.queries[query]) delete this.queries[query];\n    assign(this.queries, { [query]: { variables, cb } });\n\n    return this.query(query, variables)\n      .then(resolverData => {\n        const data = handleErrors(resolverData, logErrors)\n        return data.errors ? data : resolverData;\n      })\n      .then((data) => { cb(data); return data; });\n  }\n\n  unsubscribe(query) {\n    delete this.queries[query];\n  }\n\n  query(query, variables = {}) {\n    return graphql(this.schema, query, this.resolvers, null, variables);\n  }\n\n  mutate(mutation, variables = {}, logErrors) {\n    return graphql(this.schema, mutation, this.resolvers, null, variables)\n      .then(resolverData => {\n        const data = handleErrors(resolverData, logErrors);\n        return data.errors ? data : this.broadcast(resolverData);\n      });\n  }\n\n  broadcast = (resolverData) => {\n    entries(this.queries).forEach(([query, { variables, cb }]) => {\n      this.query(query, variables).then(cb);\n    });\n    return resolverData;\n  }\n}\n\nfunction handleErrors(resolverData, logErrors) {\n  let filteredErrors = { errors: null, networkErrors: null };\n\n  if (resolverData.errors) {\n    filteredErrors = buildErrors(resolverData.errors, logErrors);\n    if (logErrors) console.log(filteredErrors);\n  }\n  return filteredErrors;\n}\n\nfunction buildErrors(errors, logErrors) {\n  return errors.reduce((obj, error) => {\n    if (error.originalError && error.originalError.response) {\n      obj.networkErrors.push({\n        message: error.originalError.message,\n        stack: error.originalError.stack,\n        status: error.originalError.response.status,\n        response: error.originalError.response\n      });\n      return obj;\n    } else {\n      if (logErrors) {\n        console.error(error.message);\n        console.log(error.stack);\n      }\n      obj.errors.push(error);\n      return obj;\n    }\n  }, { errors: [], networkErrors: [] });\n}\n"]}