{"version":3,"sources":["../../../src/actions/show.js"],"names":["show","entityName","UrlBuilder","store","loader","normalize","resetForceFetch","forceFetchResource","includeResponseHeaders","obj","args","opts","url","options","forceFetch","clearCache","variables","forceFetching","entity","get","id","headers","clearUrls","load","then","res","entities","result","set"],"mappings":";;AAAA,OAAO,SAASA,IAAT,CAAc;AACnBC,YADmB;AAEnBC,YAFmB;AAGnBC,OAHmB;AAInBC,QAJmB;AAKnBC,WALmB;AAMnBC,iBANmB;AAOnBC,oBAPmB;AAQnBC;AARmB,CAAd,EASJC,GATI,EASCC,IATD,EASOC,IATP,EASa;;AAElB,QAAMC,MAAM,IAAIV,UAAJ,CAAeO,GAAf,EAAoBC,IAApB,EAA0BC,IAA1B,CAAZ;;AAEA,QAAM,EAAEE,SAAS,EAAEC,aAAa,KAAf,EAAsBC,aAAa,KAAnC,KAA6C,EAAxD,KAA6EL,IAAnF;AAAA,QAAqEM,SAArE,4BAAmFN,IAAnF;AACA,QAAMO,gBAAiBH,cAAcP,kBAArC;;AAEA,MAAI,CAACU,aAAL,EAAoB;AAClB,UAAMC,SAASf,MAAMgB,GAAN,CAAUlB,UAAV,EAAsBW,IAAIQ,EAA1B,CAAf;;AAEA,QAAIF,MAAJ,EAAY;AACV,UAAIV,sBAAJ,EAA4B;AAC1B,eAAO,EAAEa,SAAS,IAAX,EAAiBH,MAAjB,EAAP;AACD,OAFD,MAEO;AACL,eAAOA,MAAP;AACD;AACF;AACF;AACD,MAAID,aAAJ,EAAmBb,OAAOkB,SAAP;AACnB,MAAIP,UAAJ,EAAgBZ,MAAMY,UAAN;;AAEhB,SAAOX,OAAOmB,IAAP,CAAYX,GAAZ,EAAiBY,IAAjB,CAAsBC,OAAO;AAClC,UAAM,EAAEC,QAAF,EAAYC,MAAZ,KAAuBtB,UAAUoB,GAAV,EAAe,EAAEhB,GAAF,EAAOC,MAAMM,SAAb,EAAf,CAA7B;;AAEAb,UAAMyB,GAAN,CAAUF,QAAV;;AAEApB,oBAAgBQ,UAAhB;;AAEA,QAAIN,sBAAJ,EAA4B;AAC1B,aAAO;AACLa,iBAASI,IAAIJ,OADR;AAELH,gBAAQQ,SAASzB,UAAT,EAAqB0B,MAArB;AAFH,OAAP;AAID,KALD,MAKO;AACL,aAAOD,SAASzB,UAAT,EAAqB0B,MAArB,CAAP;AACD;AACF,GAfM,CAAP;AAgBD","file":"show.js","sourcesContent":["export function show({\n  entityName,\n  UrlBuilder,\n  store,\n  loader,\n  normalize,\n  resetForceFetch,\n  forceFetchResource,\n  includeResponseHeaders\n}, obj, args, opts) {\n\n  const url = new UrlBuilder(obj, args, opts);\n\n  const { options: { forceFetch = false, clearCache = false } = {}, ...variables } = args;\n  const forceFetching = (forceFetch || forceFetchResource);\n\n  if (!forceFetching) {\n    const entity = store.get(entityName, url.id);\n\n    if (entity) {\n      if (includeResponseHeaders) {\n        return { headers: null, entity };\n      } else {\n        return entity;\n      }\n    }\n  }\n  if (forceFetching) loader.clearUrls();\n  if (clearCache) store.clearCache();\n\n  return loader.load(url).then(res => {\n    const { entities, result } = normalize(res, { obj, args: variables });\n\n    store.set(entities);\n\n    resetForceFetch(forceFetch);\n\n    if (includeResponseHeaders) {\n      return {\n        headers: res.headers,\n        entity: entities[entityName][result]\n      };\n    } else {\n      return entities[entityName][result];\n    }\n  });\n}\n"]}