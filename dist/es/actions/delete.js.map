{"version":3,"sources":["../../../src/actions/delete.js"],"names":["deleteAction","entityName","UrlBuilder","http","store","loader","serialize","normalize","resetForceFetch","update","id","opts","resolvers","args","context","_","url","options","forceFetch","clearCache","variables","request","method","href","params","headers","data","then","res","entities","result","delete","clearUrls","cache"],"mappings":";;AAAA,eAAe,SAASA,YAAT,CAAsB;AACnCC,YADmC;AAEnCC,YAFmC;AAGnCC,MAHmC;AAInCC,OAJmC;AAKnCC,QALmC;AAMnCC,WANmC;AAOnCC,WAPmC;AAQnCC,iBARmC;AASnCC;AATmC,CAAtB,QAUY;AAAA,MAAxB,EAAEC,KAAK,IAAP,EAAwB;AAAA,MAARC,IAAQ;;AAEzB,SAAO,CAACC,SAAD,EAAYC,IAAZ,EAAkBC,OAAlB,EAA2BC,CAA3B,KAAiC;AACtC,UAAMC,MAAM,IAAId,UAAJ,CAAeU,SAAf,EAA0BC,IAA1B,EAAgCF,KAAKK,GAArC,EAA0CN,EAA1C,CAAZ;AACA,UAAM,EAAEO,SAAS,EAAEC,aAAa,KAAf,EAAsBC,aAAa,KAAnC,KAA6C,EAAxD,KAA6EN,IAAnF;AAAA,UAAqEO,SAArE,4BAAmFP,IAAnF;;AAEA,QAAIM,UAAJ,EAAgBf,MAAMe,UAAN;;AAEhB,UAAME,UAAUlB,KAAK;AACnBmB,cAAQ,QADW;AAEnBN,WAAKA,IAAIO,IAFU;AAGnBC,cAAQR,IAAIQ,MAHO;AAInBC,eAAST,IAAIS,OAJM;AAKnBC,YAAMpB,UAAUc,SAAV;AALa,KAAL,CAAhB;;AAQA,WAAOC,QAAQM,IAAR,CAAaC,OAAO;AACzB,YAAM,EAAEC,QAAF,EAAYC,MAAZ,KAAuBvB,UAAUqB,GAAV,EAAehB,SAAf,EAA0BQ,SAA1B,CAA7B;;AAEAhB,YAAM2B,MAAN,CAAa9B,UAAb,EAAyBe,IAAIN,EAA7B;;AAEAL,aAAO2B,SAAP;AACAxB,sBAAgBU,UAAhB;;AAEAT,aAAOL,MAAM6B,KAAb,EAAoBpB,IAApB;AACA,aAAOgB,SAAS5B,UAAT,EAAqB6B,MAArB,KAAgC,EAAvC;AACD,KAVM,CAAP;AAWD,GAzBD;AA0BD","file":"delete.js","sourcesContent":["export default function deleteAction({\n  entityName,\n  UrlBuilder,\n  http,\n  store,\n  loader,\n  serialize,\n  normalize,\n  resetForceFetch,\n  update\n}, { id = 'id', ...opts }) {\n\n  return (resolvers, args, context, _) => {\n    const url = new UrlBuilder(resolvers, args, opts.url, id);\n    const { options: { forceFetch = false, clearCache = false } = {}, ...variables } = args;\n\n    if (clearCache) store.clearCache();\n\n    const request = http({\n      method: 'delete',\n      url: url.href,\n      params: url.params,\n      headers: url.headers,\n      data: serialize(variables)\n    });\n\n    return request.then(res => {\n      const { entities, result } = normalize(res, resolvers, variables);\n\n      store.delete(entityName, url.id);\n\n      loader.clearUrls();\n      resetForceFetch(forceFetch);\n\n      update(store.cache, args);\n      return entities[entityName][result] || {};\n    });\n  }\n}\n"]}