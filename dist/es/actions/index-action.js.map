{"version":3,"sources":["../../../src/actions/index-action.js"],"names":["values","Object","indexAction","entityName","UrlBuilder","store","loader","normalize","resetForceFetch","forceFetchResource","storeQuery","includeResponseHeaders","opts","obj","args","context","_","url","options","forceFetch","clearCache","variables","forceFetching","entity","get","entities","filter","headers","clearUrls","load","then","res","set","entityValues"],"mappings":";;AAAA,MAAM,EAAEA,MAAF,KAAaC,MAAnB;;AAEA,OAAO,SAASC,WAAT,CAAqB;AAC1BC,YAD0B;AAE1BC,YAF0B;AAG1BC,OAH0B;AAI1BC,QAJ0B;AAK1BC,WAL0B;AAM1BC,iBAN0B;AAO1BC,oBAP0B;AAQ1BC,YAR0B;AAS1BC;AAT0B,CAArB,EAUJC,IAVI,EAUE;;AAEP,SAAO,CAACC,GAAD,EAAMC,IAAN,EAAYC,OAAZ,EAAqBC,CAArB,KAA2B;AAChC,UAAMC,MAAM,IAAIb,UAAJ,CAAeS,GAAf,EAAoBC,IAApB,EAA0BF,KAAKK,GAA/B,CAAZ;AACA,UAAM,EAAEC,SAAS,EAAEC,aAAa,KAAf,EAAsBC,aAAa,KAAnC,KAA6C,EAAxD,KAA6EN,IAAnF;AAAA,UAAqEO,SAArE,4BAAmFP,IAAnF;AACA,UAAMQ,gBAAiBH,cAAcV,kBAArC;;AAEA,QAAI,CAACa,aAAL,EAAoB;AAClB,YAAMC,SAASlB,MAAMmB,GAAN,CAAUrB,UAAV,CAAf;AACA,UAAIoB,MAAJ,EAAY;AACV,cAAME,WAAWF,OAAOG,MAAP,CAAchB,WAAWG,GAAX,EAAgBQ,SAAhB,CAAd,CAAjB;;AAEA,YAAIV,sBAAJ,EAA4B;AAC1B,iBAAO,EAAEgB,SAAS,IAAX,EAAiBF,QAAjB,EAAP;AACD,SAFD,MAEO;AACL,iBAAOA,QAAP;AACD;AACF;AACF;AACD,QAAIH,aAAJ,EAAmBhB,OAAOsB,SAAP;AACnB,QAAIR,UAAJ,EAAgBf,MAAMe,UAAN;;AAEhB,WAAOd,OAAOuB,IAAP,CAAYZ,GAAZ,EAAiBa,IAAjB,CAAsBC,OAAO;AAClC,YAAM,EAAEN,QAAF,KAAelB,UAAUwB,GAAV,EAAelB,GAAf,EAAoBQ,SAApB,CAArB;AACAhB,YAAM2B,GAAN,CAAUP,QAAV;;AAEAjB,sBAAgBW,UAAhB;;AAEA,YAAMc,eAAejC,OAAQyB,SAAStB,UAAT,KAAwB,EAAhC,CAArB;;AAEA,UAAIQ,sBAAJ,EAA4B;AAC1B,eAAO,EAAEgB,SAASI,IAAIJ,OAAf,EAAwBF,UAAUQ,YAAlC,EAAP;AACD,OAFD,MAEO;AACL,eAAOA,YAAP;AACD;AACF,KAbM,CAAP;AAcD,GAlCD;AAmCD","file":"index-action.js","sourcesContent":["const { values } = Object;\n\nexport function indexAction({\n  entityName,\n  UrlBuilder,\n  store,\n  loader,\n  normalize,\n  resetForceFetch,\n  forceFetchResource,\n  storeQuery,\n  includeResponseHeaders\n}, opts) {\n\n  return (obj, args, context, _) => {\n    const url = new UrlBuilder(obj, args, opts.url);\n    const { options: { forceFetch = false, clearCache = false } = {}, ...variables } = args;\n    const forceFetching = (forceFetch || forceFetchResource);\n\n    if (!forceFetching) {\n      const entity = store.get(entityName);\n      if (entity) {\n        const entities = entity.filter(storeQuery(obj, variables));\n\n        if (includeResponseHeaders) {\n          return { headers: null, entities };\n        } else {\n          return entities;\n        }\n      }\n    }\n    if (forceFetching) loader.clearUrls();\n    if (clearCache) store.clearCache();\n\n    return loader.load(url).then(res => {\n      const { entities } = normalize(res, obj, variables);\n      store.set(entities);\n\n      resetForceFetch(forceFetch);\n\n      const entityValues = values((entities[entityName] || {}));\n\n      if (includeResponseHeaders) {\n        return { headers: res.headers, entities: entityValues };\n      } else {\n        return entityValues;\n      }\n    });\n  }\n}\n"]}